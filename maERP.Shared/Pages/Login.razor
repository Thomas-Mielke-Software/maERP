@page "/login"

@using System.Text.Json
@using Blazored.LocalStorage
@using maERP.Shared.Dtos.User
@using maERP.Shared.Contracts
@using maERP.Shared.Services

@inject NavigationManager _navManager

<h3>Login</h3>

<EditForm Model="@loginDto" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>E-Mail</label>
        <input type="email" @bind-value="loginDto.Email " class="form-control" placeholder="E-Mail Adresse" />
        <ValidationMessage For="@(() => loginDto.Email)" />
    </div>

    <div class="mt-2 form-group">
        <label>Passwort</label>
        <input type="password" @bind-value="loginDto.Password" class="form-control" placeholder="Passwort" />
        <ValidationMessage For="@(() => loginDto.Password)" />
    </div>

    @if (_showServerInput)
    {
        <div class="mt-2 form-group">
            <label>Server</label>
            <input type="url" @bind-value="loginDto.Server" class="form-control" placeholder="http://localhost:13975s" />
        </div>
    }

    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">
            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
            Login
        </button>
    </div>

    <div>@_errorMessage</div>
</EditForm>


@code
{
    [Inject]
    private ILocalStorageService _localStorage { get; set; }

    [Inject]
    private IAuthenticationService _authenticationService { get; set; }

    LoginDto loginDto = new();
    private string loginServer = "";
    private bool _showServerInput = true;
    private string _spinnerClass = string.Empty;
    private string _errorMessage = string.Empty;

    private async void onLoad()
    {
        bool loginServerExists = await _localStorage.ContainKeyAsync("server");

        if (loginServerExists)
        {
            _showServerInput = false;
            loginServer = await _localStorage.GetItemAsStringAsync("server");
        }
        
        this.StateHasChanged();
    }

    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";

        await _localStorage.SetItemAsStringAsync("server", loginDto.Server);

        var loginResponse = await _authenticationService.AuthenticateAsync(loginDto.Email, loginDto.Password);

        if (loginResponse == true)
        {
            _navManager.NavigateTo("/");
            return;
        }

        _errorMessage = "Login fehlgeschlagen";
        _spinnerClass = "";


        this.StateHasChanged();
    }
}