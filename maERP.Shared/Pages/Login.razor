@page "/login"

@using Newtonsoft.Json
@using maERP.Shared.Dtos.User;
@using maERP.Shared.Contracts;
@using maERP.Shared.Services;

@inject NavigationManager NavManager;
@inject IDataService<Login> DataService;
@inject AuthStateProvider AuthStateProvider;

<h3>Login</h3>

<EditForm Model="@loginDto" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>E-Mail</label>
        <input type="email" @bind-value="loginDto.Email " class="form-control" placeholder="E-Mail Adresse" />
        <ValidationMessage For="@(() => loginDto.Email)" />
    </div>

    <div class="mt-2 form-group">
        <label>Passwort</label>
        <input type="password" @bind-value="loginDto.Password" class="form-control" placeholder="Passwort" />
        <ValidationMessage For="@(() => loginDto.Password)" />
    </div>

    @if (_showServerInput)
    {
        <div class="mt-2 form-group">
            <label>Server</label>
            <input type="url" @bind-value="loginServer" class="form-control" placeholder="https://erp.domain.de" />
        </div>
    }

    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">
            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
            Login
        </button>
    </div>

    <div>@_errorMessage</div>
</EditForm>


@code
{
    LoginDto loginDto = new();
    private string loginServer = "";
    private bool _showServerInput = true;
    private string _spinnerClass = string.Empty;
    private string _errorMessage = string.Empty;

    private void onLoad()
    {
        if (Globals.ServerBaseUrl.Length > 0)
        {
            _showServerInput = false;
            loginServer = Globals.ServerBaseUrl;
        }

        /*
        if(Preferences.Default.ContainsKey("loginEmail"))
        {
            loginDto.Email = Preferences.Default.Get<string>("loginEmail", "");
        }
        */

        this.StateHasChanged();
    }

    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";

        var loginResponse = await DataService.Login(loginServer, loginDto.Email, loginDto.Password);

        if (loginResponse is not null)
        {
            await AuthStateProvider.Login(loginResponse.Token, loginResponse.RefreshToken);
            // Preferences.Default.Set<string>("loginEmail", loginDto.Email);
            NavManager.NavigateTo("/");
            return;
        }

        _errorMessage = "E-Mail oder Passwort falsch";
        _spinnerClass = "";

        // await App.Current.MainPage.DisplayAlert("Fehler", _errorMessage, "OK");

        this.StateHasChanged();
    }
}