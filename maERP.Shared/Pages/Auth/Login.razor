@page "/login"

@using maERP.Shared.Dtos.User

@inject NavigationManager _navManager
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject maERP.Shared.Contracts.IAuthenticationService _authenticationService

<MudText Typo="Typo.h3" Class="mb-8">Login</MudText>

<EditForm Model="@loginDto" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="E-Mail" @bind-Value="loginDto.Email" For="@(() => loginDto.Email)" />
                    <MudTextField Label="Passwort" @bind-Value="loginDto.Password" For="@(() => loginDto.Password)" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code
{
    LoginDto loginDto = new LoginDto { Email = "admin@localhost.com", Password = "maERP!12", Server = "https://localhost:8443" };

    private string loginServer = "";
    // private bool _showServerInput = true;
    private string _spinnerClass = string.Empty;
    private string _errorMessage = string.Empty;

    private async void onLoad()
    {
        bool loginServerExists = await _localStorage.ContainKeyAsync("server");

        if (loginServerExists)
        {
            // _showServerInput = false;
            loginServer = await _localStorage.GetItemAsStringAsync("server");
        }

        this.StateHasChanged();
    }

    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";

        await _localStorage.SetItemAsStringAsync("server", loginDto.Server);

        var loginResponse = await _authenticationService.AuthenticateAsync(loginDto.Email, loginDto.Password);

        if (loginResponse == true)
        {
            _navManager.NavigateTo("/");
            return;
        }

        _errorMessage = "Login fehlgeschlagen";
        _spinnerClass = "";

        await _localStorage.RemoveItemAsync("server");

        this.StateHasChanged();
    }
}