@page "/SalesChannels/add"
@page "/SalesChannels/{salesChannelId:int}/edit"

@using Microsoft.AspNetCore.Authorization
@using maERP.Shared.Contracts
@using maERP.Shared.Dtos.SalesChannel
@using maERP.Shared.Dtos.Warehouse

@attribute [Authorize]

@inject NavigationManager _navManager
@inject IDataService<SalesChannelUpdateDto> _dsSalesChannel
@inject IDataService<List<WarehouseListDto>> _dsWarehouse

<h1>Vertriebskanal</h1>

<hr />

<EditForm Model="@salesChannel" OnValidSubmit="Save">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="Cellnumber" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="@salesChannel.Name" />
        </div>
    </div>

    <div class="mb-3">
        <label for="Name" class="form-label">URL</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="@salesChannel.Url" />
        </div>
        <ValidationMessage For="@(() => salesChannel.Url)" />
    </div>

    <div class="mb-3">
        <label for="Address" class="form-label">Username</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="@salesChannel.Username" />
        </div>
        <ValidationMessage For="@(() => salesChannel.Username)" />
    </div>

    <div class="mb-3">
        <label for="Emailid" class="form-label">Passwort</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="@salesChannel.Password" />
        </div>
        <ValidationMessage For="@(() => salesChannel.Password)" />
    </div>

    <div class="mb-3">
        <label for="warehouse" class="form-label">Lager</label>
        <div class="col-md-4">
            <InputSelect for="Publisher" class="form-control" @bind-Value="@salesChannel.WarehouseId">
                @if(salesChannelId == 0)
                {
                    <option value=0 disabled selected hidden>
                        [Lager auswählen]
                    </option>
                }

                @foreach (var warehouse in warehouses)
                {
                    if(salesChannel.WarehouseId == warehouse.Id)
                    {
                        <option value="@warehouse.Id" selected>@warehouse.Name</option>
                    }
                    else
                    {
                        <option value="@warehouse.Id">@warehouse.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <ValidationMessage For="@(() => salesChannel.WarehouseId)" />
    </div>

    <table class="table table-stripped align-middle table-bordered">
        <thead>
            <tr>
                <th></th>
                <th>Importieren</th>
                <th>Exportieren</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Produkte</td>
                <td><InputCheckbox @bind-Value="@salesChannel.ImportProducts" /></td>
                <td><InputCheckbox @bind-Value="@salesChannel.ExportProducts" /></td>
            </tr>
            <tr>
                <td>Kunden</td>
                <td><InputCheckbox @bind-Value="@salesChannel.ImportCustomers" /></td>
                <td><InputCheckbox @bind-Value="@salesChannel.ExportCustomers" /></td>
            </tr>
            <tr>
                <td>Bestellungen</td>
                <td><InputCheckbox @bind-Value="@salesChannel.ImportOrders" /></td>
                <td><InputCheckbox @bind-Value="@salesChannel.ExportOrders" /></td>
            </tr>
        </tbody>
    </table>

    <ValidationSummary />

    <div class="form-group">

        <button type="submit" class="btn btn-primary">Speichern</button>
        <button class="btn btn-light">Abbrechen</button>
    </div>
</EditForm>

@code {

    [Parameter]
    public int? salesChannelId { get; set; }

    protected string Title = "hinzufügen";

    protected SalesChannelUpdateDto salesChannel = new();
    protected List<WarehouseListDto> warehouses = new();

    protected override async Task OnParametersSetAsync()
    {
        if (salesChannelId != 0)
        {
            warehouses.Add(new WarehouseListDto { Id = 1, Name = "Test" });

            Title = "Bearbeiten";
            warehouses = await _dsWarehouse.Request("GET", "/Warehouses/GetAll");
            
            salesChannel = await _dsSalesChannel.Request("GET", "/SalesChannels/" + salesChannelId);
        }
    }

    protected async Task Save()
    {
        if (salesChannelId != 0)
        {
            await _dsSalesChannel.Request("PUT", "/SalesChannels/" + salesChannelId, salesChannel);
        }
        else
        {
            await _dsSalesChannel.Request("POST", "/SalesChannels", salesChannel);
        }

        ReturnToList();
    }

    public void ReturnToList()
    {
        StateHasChanged();
        _navManager.NavigateTo("/SalesChannels");
    }
}