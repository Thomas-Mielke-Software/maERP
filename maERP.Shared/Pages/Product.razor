@page "/Products"

@using Microsoft.AspNetCore.Authorization
@using maERP.Shared.Services
@using maERP.Shared.Dtos.Product

@attribute [Authorize]

@inject NavigationManager NavManager
@inject IDataService<ICollection<ProductListDto>> DataService

<PageTitle>Produkte</PageTitle>

<h1>Produkte</h1>

@if (products == null)
{
    <p><em>Lade...</em></p>
}
else
{
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Suche..." @bind="filter" @bind:event="oninput">
    </div>
    <br />
    <table class="table table-striped align-middle table-bordered">
        <thead>
            <tr>
                <th>SKU</th>
                <th>Name</th>
                <th>Preis</th>
                <th>Steuerklasse</th>
                <th>EAN</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products.Where(x => IsVisible(x)))
            {
                if (!IsVisible(product))
                    continue;

                <tr>
                    <td>@product.Sku</td>
                    <td>@product.Name</td>
                    <td>@product.Price.ToString("F") EUR</td>
                    <td>@product.TaxClass</td>
                    <td>@product.Ean</td>
                    <td>
                        <a href='/Product/edit/@product.Id' class="btn btn-outline-dark" role="button">
                            Bearbeiten
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>

    <a href="/Product/add">Produkt anlegen</a>
}

@code {

    private ICollection<ProductListDto>? products;
    public string? filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        products = await DataService.Request("GET", "/Products/GetAll");
    }

    public bool IsVisible(ProductListDto product)
    {
        if (string.IsNullOrEmpty(filter))
            return true;

        if (product.Sku.Contains(filter, StringComparison.OrdinalIgnoreCase) ||
            product.Name.Contains(filter, StringComparison.OrdinalIgnoreCase) ||
            product.Ean.Contains(filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}