// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using maERP.Server.Models;

#nullable disable

namespace maERP.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230407210224_initDatabase")]
    partial class initDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e82b2dfe-c982-485e-8ce8-35bdc4ae5ceb",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("maERP.Shared.Models.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4df8f35-40b3-4927-82fc-0477fa066354",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECqCwxT72XS8JPGl4oXFuHD5pyY1k0KbFiHnDIYdEw1aPcjZQCaq0hvIJZXe5sSkxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5fa61df-9b94-422b-a90c-86491c7a48f4",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        });
                });

            modelBuilder.Entity("maERP.Shared.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("CountryId");

                    b.ToTable("country", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryCode = "de",
                            CreatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3010),
                            Name = "Deutschland",
                            UpdatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3010)
                        },
                        new
                        {
                            CountryId = 2,
                            CountryCode = "at",
                            CreatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3010),
                            Name = "Österreich",
                            UpdatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3010)
                        },
                        new
                        {
                            CountryId = 3,
                            CountryCode = "ch",
                            CreatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3010),
                            Name = "Schweiz",
                            UpdatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3010)
                        });
                });

            modelBuilder.Entity("maERP.Shared.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerStatus")
                        .HasColumnType("integer")
                        .HasColumnName("customer_status");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrollment_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.HasKey("Id");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("maERP.Shared.Models.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("HouseNr")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("house_nr");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zip");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("customer_address", (string)null);
                });

            modelBuilder.Entity("maERP.Shared.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("order_status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("maERP.Shared.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ASIN")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("asin");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(64000)
                        .HasColumnType("character varying(64000)")
                        .HasColumnName("description");

                    b.Property<string>("EAN")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("ean");

                    b.Property<decimal>("Msrp")
                        .HasColumnType("numeric")
                        .HasColumnName("msrp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sku");

                    b.Property<int?>("TaxClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TaxClassId");

                    b.ToTable("product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 4, 7, 23, 2, 23, 945, DateTimeKind.Local).AddTicks(3150),
                            Description = "Beschreibung 1",
                            Msrp = 0m,
                            Name = "Testprodukt 1",
                            Price = 100m,
                            SKU = "1001",
                            UpdatedAt = new DateTime(2023, 4, 7, 23, 2, 23, 945, DateTimeKind.Local).AddTicks(3200)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 4, 7, 23, 2, 23, 945, DateTimeKind.Local).AddTicks(3210),
                            Description = "Beschreibung 2",
                            Msrp = 0m,
                            Name = "Testprodukt 2",
                            Price = 100m,
                            SKU = "1002",
                            UpdatedAt = new DateTime(2023, 4, 7, 23, 2, 23, 945, DateTimeKind.Local).AddTicks(3210)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 4, 7, 23, 2, 23, 945, DateTimeKind.Local).AddTicks(3210),
                            Description = "Beschreibung 3",
                            Msrp = 0m,
                            Name = "Testprodukt 3",
                            Price = 100m,
                            SKU = "1003",
                            UpdatedAt = new DateTime(2023, 4, 7, 23, 2, 23, 945, DateTimeKind.Local).AddTicks(3210)
                        });
                });

            modelBuilder.Entity("maERP.Shared.Models.ProductSalesChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<bool>("ProductExport")
                        .HasColumnType("boolean")
                        .HasColumnName("product_export");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("ProductImport")
                        .HasColumnType("boolean")
                        .HasColumnName("product_import");

                    b.Property<int>("RemoteProductId")
                        .HasColumnType("integer")
                        .HasColumnName("remote_product_id");

                    b.Property<int?>("SalesChannelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesChannelId");

                    b.ToTable("product_sales_channel", (string)null);
                });

            modelBuilder.Entity("maERP.Shared.Models.ProductStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("product_stock", (string)null);
                });

            modelBuilder.Entity("maERP.Shared.Models.SalesChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("ExportCustomers")
                        .HasColumnType("boolean")
                        .HasColumnName("export_customers");

                    b.Property<bool>("ExportOrders")
                        .HasColumnType("boolean")
                        .HasColumnName("export_orders");

                    b.Property<bool>("ExportProducts")
                        .HasColumnType("boolean")
                        .HasColumnName("export_products");

                    b.Property<bool>("ImportCustomers")
                        .HasColumnType("boolean")
                        .HasColumnName("import_customers");

                    b.Property<bool>("ImportOrders")
                        .HasColumnType("boolean")
                        .HasColumnName("import_orders");

                    b.Property<bool>("ImportProducts")
                        .HasColumnType("boolean")
                        .HasColumnName("import_products");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("URL")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("sales_channel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3310),
                            ExportCustomers = false,
                            ExportOrders = false,
                            ExportProducts = false,
                            ImportCustomers = false,
                            ImportOrders = false,
                            ImportProducts = true,
                            Name = "Shopware Demo Shop",
                            Password = "demopass",
                            Type = 10,
                            URL = "https://www.example.com/",
                            UpdatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3310),
                            Username = "demouser"
                        });
                });

            modelBuilder.Entity("maERP.Shared.Models.ShippingProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("shipping_provider", (string)null);
                });

            modelBuilder.Entity("maERP.Shared.Models.ShippingProviderRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("MaxHeight")
                        .HasColumnType("numeric")
                        .HasColumnName("max_height");

                    b.Property<decimal>("MaxLength")
                        .HasColumnType("numeric")
                        .HasColumnName("max_length");

                    b.Property<decimal>("MaxWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("max_weight");

                    b.Property<decimal>("MaxWidth")
                        .HasColumnType("numeric")
                        .HasColumnName("max_width");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ShippingProviderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ShippingProviderId");

                    b.ToTable("shipping_provider_rate", (string)null);
                });

            modelBuilder.Entity("maERP.Shared.Models.TaxClass", b =>
                {
                    b.Property<int>("TaxClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaxClassId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("TaxRate")
                        .HasColumnType("double precision")
                        .HasColumnName("tax_rate");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("TaxClassId");

                    b.ToTable("tax_class", (string)null);

                    b.HasData(
                        new
                        {
                            TaxClassId = 1,
                            CreatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3370),
                            TaxRate = 0.0,
                            UpdatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3370)
                        },
                        new
                        {
                            TaxClassId = 2,
                            CreatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3370),
                            TaxRate = 7.0,
                            UpdatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3370)
                        },
                        new
                        {
                            TaxClassId = 3,
                            CreatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3370),
                            TaxRate = 19.0,
                            UpdatedAt = new DateTime(2023, 4, 7, 21, 2, 23, 945, DateTimeKind.Utc).AddTicks(3370)
                        });
                });

            modelBuilder.Entity("maERP.Shared.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("warehouse", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("maERP.Shared.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("maERP.Shared.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Shared.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("maERP.Shared.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Shared.Models.CustomerAddress", b =>
                {
                    b.HasOne("maERP.Shared.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Shared.Models.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("maERP.Shared.Models.Order", b =>
                {
                    b.HasOne("maERP.Shared.Models.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Shared.Models.Product", b =>
                {
                    b.HasOne("maERP.Shared.Models.TaxClass", "TaxClass")
                        .WithMany()
                        .HasForeignKey("TaxClassId");

                    b.Navigation("TaxClass");
                });

            modelBuilder.Entity("maERP.Shared.Models.ProductSalesChannel", b =>
                {
                    b.HasOne("maERP.Shared.Models.Product", "Product")
                        .WithMany("ProductSalesChannel")
                        .HasForeignKey("ProductId");

                    b.HasOne("maERP.Shared.Models.SalesChannel", "SalesChannel")
                        .WithMany()
                        .HasForeignKey("SalesChannelId");

                    b.Navigation("Product");

                    b.Navigation("SalesChannel");
                });

            modelBuilder.Entity("maERP.Shared.Models.ProductStock", b =>
                {
                    b.HasOne("maERP.Shared.Models.Product", "Product")
                        .WithMany("ProductStock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Shared.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("maERP.Shared.Models.SalesChannel", b =>
                {
                    b.HasOne("maERP.Shared.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("maERP.Shared.Models.ShippingProviderRate", b =>
                {
                    b.HasOne("maERP.Shared.Models.ShippingProvider", null)
                        .WithMany("ShippingRates")
                        .HasForeignKey("ShippingProviderId");
                });

            modelBuilder.Entity("maERP.Shared.Models.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("maERP.Shared.Models.Product", b =>
                {
                    b.Navigation("ProductSalesChannel");

                    b.Navigation("ProductStock");
                });

            modelBuilder.Entity("maERP.Shared.Models.ShippingProvider", b =>
                {
                    b.Navigation("ShippingRates");
                });
#pragma warning restore 612, 618
        }
    }
}
