@page "/User/add"
@page "/User/edit/{userId}"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject maERP.Server.Contracts.IAuthManager authManagerRepository

<h1>Benutzer</h1>

<hr />

<EditForm Model="@user">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Address" class="form-label">E-Mail</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Email" />
        </div>
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="Cellnumber" class="form-label">Vorname</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.FirstName" />
        </div>
    </div>
    <div class="mb-3">
        <label for="Name" class="form-label">Nachname</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.LastName" />
        </div>
        <ValidationMessage For="@(() => user.LastName)" />
    </div>
    <div class="mb-3">
        <label for="Name" class="form-label">Passwort</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Password" />
        </div>
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary" @onclick="SaveUser">Speichern</button>
        <button class="btn btn-light" @onclick="Cancel">Abbrechen</button>
    </div>
</EditForm>

@code {

    [Parameter]
    public string ?userId { get; set; }

    protected string Title = "hinzufügen";

    protected maERP.Shared.Dtos.User.ApiUserDto user = new();

    protected override async Task OnParametersSetAsync()
    {
        if (userId != null)
        {
            Title = "bearbeiten";
            user = await authManagerRepository.FindByIdAsync(userId);
        }
    }

    protected async Task SaveUser()
    {
        if (user != null)
        {
            Console.WriteLine("Update User");
            await authManagerRepository.UpdateAsync(user);
        }
        else
        {
            Console.WriteLine("Register User");
            await authManagerRepository.Register(user);
            Cancel();
        }
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/User");
    }
}
