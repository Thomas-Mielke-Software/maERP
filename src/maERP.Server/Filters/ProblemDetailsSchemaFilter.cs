using Microsoft.AspNetCore.Mvc;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace maERP.Server.Filters;

/// <summary>
/// Schema filter that ensures ASP.NET Core's ProblemDetails class
/// is properly documented with RFC 7807 schema definition.
/// </summary>
public class ProblemDetailsSchemaFilter : ISchemaFilter
{
    public void Apply(OpenApiSchema schema, SchemaFilterContext context)
    {
        if (context.Type == typeof(ProblemDetails))
        {
            // Override the default ProblemDetails schema with RFC 7807 compliant version
            schema.Properties.Clear();
            schema.Properties.Add("type", new OpenApiSchema
            {
                Type = "string",
                Format = "uri",
                Description = "A URI reference that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type."
            });
            
            schema.Properties.Add("title", new OpenApiSchema
            {
                Type = "string",
                Description = "A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem."
            });
            
            schema.Properties.Add("status", new OpenApiSchema
            {
                Type = "integer",
                Format = "int32",
                Description = "The HTTP status code generated by the origin server for this occurrence of the problem."
            });
            
            schema.Properties.Add("detail", new OpenApiSchema
            {
                Type = "string", 
                Description = "A human-readable explanation specific to this occurrence of the problem."
            });
            
            schema.Properties.Add("instance", new OpenApiSchema
            {
                Type = "string",
                Format = "uri",
                Description = "A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced."
            });

            schema.Properties.Add("traceId", new OpenApiSchema
            {
                Type = "string",
                Description = "The correlation ID for tracing this request across distributed systems."
            });

            // Allow additional properties for problem-specific extensions
            schema.AdditionalProperties = new OpenApiSchema
            {
                Type = "object",
                Description = "Additional members can be used to carry problem-specific extension data."
            };

            schema.Example = new Microsoft.OpenApi.Any.OpenApiObject
            {
                ["type"] = new Microsoft.OpenApi.Any.OpenApiString("https://tools.ietf.org/html/rfc9110#section-15.5.1"),
                ["title"] = new Microsoft.OpenApi.Any.OpenApiString("Bad Request"),
                ["status"] = new Microsoft.OpenApi.Any.OpenApiInteger(400),
                ["detail"] = new Microsoft.OpenApi.Any.OpenApiString("The 'name' field is required but was not provided in the request body."),
                ["instance"] = new Microsoft.OpenApi.Any.OpenApiString("/api/v1/products"),
                ["traceId"] = new Microsoft.OpenApi.Any.OpenApiString("0HN7KBGV5C3QD:00000001"),
                ["validationErrors"] = new Microsoft.OpenApi.Any.OpenApiArray
                {
                    new Microsoft.OpenApi.Any.OpenApiString("Name is required"),
                    new Microsoft.OpenApi.Any.OpenApiString("Price must be greater than 0")
                }
            };
        }
    }
}