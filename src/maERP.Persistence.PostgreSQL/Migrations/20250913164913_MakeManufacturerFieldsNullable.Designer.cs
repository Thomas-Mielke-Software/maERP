// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using maERP.Persistence.DatabaseContext;

#nullable disable

namespace maERP.Persistence.PostgreSQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250913164913_MakeManufacturerFieldsNullable")]
    partial class MakeManufacturerFieldsNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "abc43a7e-f7bb-4447-baaf-1add431ddbdf",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("user_login", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("user_token", (string)null);
                });

            modelBuilder.Entity("SalesChannelWarehouse", b =>
                {
                    b.Property<Guid>("SalesChannelsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WarehousesId")
                        .HasColumnType("uuid");

                    b.HasKey("SalesChannelsId", "WarehousesId");

                    b.HasIndex("WarehousesId");

                    b.ToTable("SalesChannelWarehouses", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.AiModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AiModelType")
                        .HasColumnType("integer");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("NCtx")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ai_model", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.AiPrompt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AiModelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromptText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AiModelId");

                    b.ToTable("ai_prompt", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DefaultTenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultTenantId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7226a718-77b7-41c5-b197-6ae53d7f2bbe",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 40, DateTimeKind.Utc).AddTicks(5610),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 40, DateTimeKind.Utc).AddTicks(5610),
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "System",
                            Lastname = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENJQjgiY0io9o6BQQexxCQIpFiGVbCgoAK3NORodko4mOH/3UbH24+B2hYYYJzbCdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8a5e4ff-a81a-45d6-bb0f-ca4290650412",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c26f483e-3ec2-4bf6-bb2a-d63cb7d0a210",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 86, DateTimeKind.Utc).AddTicks(2200),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 86, DateTimeKind.Utc).AddTicks(2200),
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "System",
                            Lastname = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFu4L1PD8JTVTEZQ6ZbAi4lzH5YXy+iPcbji7OuPntVpw3S/5s+ff9/SpsCEjwiwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6a9b5fd-3291-46e2-a4df-af6f63da120d",
                            TwoFactorEnabled = false,
                            UserName = "user@localhost.com"
                        });
                });

            modelBuilder.Entity("maERP.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("country", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CountryCode = "DE",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4090),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4090),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CountryCode = "AT",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4810),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4810),
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CountryCode = "CH",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4820),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4820),
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CountryCode = "AD",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4820),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4820),
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CountryCode = "AF",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4830),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4830),
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CountryCode = "AG",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4830),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4830),
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CountryCode = "AL",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4840),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4840),
                            Name = "Albania"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CountryCode = "AM",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4840),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4840),
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CountryCode = "AO",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4840),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4840),
                            Name = "Angola"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CountryCode = "AX",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4850),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4850),
                            Name = "Åland Islands"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CountryCode = "AR",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4850),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4850),
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CountryCode = "AT",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4860),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4860),
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CountryCode = "AU",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4860),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4860),
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            CountryCode = "AZ",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4860),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4860),
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            CountryCode = "BA",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4870),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4870),
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            CountryCode = "BB",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4870),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4870),
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            CountryCode = "BE",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4880),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4880),
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            CountryCode = "BG",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4880),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4880),
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            CountryCode = "BL",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4880),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4880),
                            Name = "Saint Barthélemy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            CountryCode = "BO",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4890),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4890),
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            CountryCode = "BR",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4890),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4890),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            CountryCode = "BS",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4890),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4890),
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            CountryCode = "BY",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4900),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4900),
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            CountryCode = "BZ",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4900),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4900),
                            Name = "Belize"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            CountryCode = "CA",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4910),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4910),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            CountryCode = "CH",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4910),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4910),
                            Name = "Cocos (Keeling) Islands"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            CountryCode = "CI",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4910),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4910),
                            Name = "Ivory Coast"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            CountryCode = "CL",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4920),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4920),
                            Name = "Chile"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            CountryCode = "CN",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4920),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4920),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000030"),
                            CountryCode = "CO",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4930),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4930),
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            CountryCode = "CR",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4930),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4930),
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000032"),
                            CountryCode = "CU",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4930),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4930),
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000033"),
                            CountryCode = "CY",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4940),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4940),
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000034"),
                            CountryCode = "CZ",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4940),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4940),
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000035"),
                            CountryCode = "DO",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4940),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4940),
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000036"),
                            CountryCode = "DK",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4950),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4950),
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000037"),
                            CountryCode = "DZ",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4950),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4950),
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000038"),
                            CountryCode = "EC",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4960),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4960),
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000039"),
                            CountryCode = "EE",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4960),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4960),
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000040"),
                            CountryCode = "EG",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4960),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4960),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000041"),
                            CountryCode = "ER",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4970),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4970),
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000042"),
                            CountryCode = "ES",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4970),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4970),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000043"),
                            CountryCode = "ET",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4980),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000044"),
                            CountryCode = "FI",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4980),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Finland"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000045"),
                            CountryCode = "FR",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4980),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4980),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000046"),
                            CountryCode = "GB",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4990),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4990),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000047"),
                            CountryCode = "GE",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4990),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4990),
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000048"),
                            CountryCode = "GF",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4990),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(4990),
                            Name = "French Guiana"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000049"),
                            CountryCode = "GH",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5000),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5000),
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000050"),
                            CountryCode = "GL",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5000),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5000),
                            Name = "Greenland"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000051"),
                            CountryCode = "GP",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5010),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5010),
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000052"),
                            CountryCode = "GR",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5010),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5010),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000053"),
                            CountryCode = "GT",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5010),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5010),
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000054"),
                            CountryCode = "GY",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5020),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5020),
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000055"),
                            CountryCode = "HN",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5020),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5020),
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000056"),
                            CountryCode = "HR",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5030),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5030),
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000057"),
                            CountryCode = "HT",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5030),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5030),
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000058"),
                            CountryCode = "HU",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5030),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5030),
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000059"),
                            CountryCode = "ID",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5040),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5040),
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000060"),
                            CountryCode = "IE",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5040),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5040),
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000061"),
                            CountryCode = "IN",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5040),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5040),
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000062"),
                            CountryCode = "IR",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5050),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5050),
                            Name = "Iran"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000063"),
                            CountryCode = "IS",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5050),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5050),
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000064"),
                            CountryCode = "IT",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5060),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5060),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000065"),
                            CountryCode = "JM",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5060),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5060),
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000066"),
                            CountryCode = "JP",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5060),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5060),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000067"),
                            CountryCode = "KE",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5070),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5070),
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000068"),
                            CountryCode = "KG",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5070),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5070),
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000069"),
                            CountryCode = "KR",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5070),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5080),
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000070"),
                            CountryCode = "KW",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5080),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5080),
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000071"),
                            CountryCode = "KZ",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5080),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5080),
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000072"),
                            CountryCode = "LU",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5090),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5090),
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000073"),
                            CountryCode = "LT",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5090),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5090),
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000074"),
                            CountryCode = "LV",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5090),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5090),
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000075"),
                            CountryCode = "MA",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5100),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5100),
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000076"),
                            CountryCode = "MC",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5100),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5100),
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000077"),
                            CountryCode = "MD",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5170),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5170),
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000078"),
                            CountryCode = "MF",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5180),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5180),
                            Name = "Saint Martin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000079"),
                            CountryCode = "MG",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5180),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5180),
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000080"),
                            CountryCode = "MQ",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5180),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5180),
                            Name = "Martinique"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000081"),
                            CountryCode = "MT",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5190),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5190),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000082"),
                            CountryCode = "MX",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5190),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5190),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000083"),
                            CountryCode = "MY",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5200),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5200),
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000084"),
                            CountryCode = "NG",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5200),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5200),
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000085"),
                            CountryCode = "NI",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5200),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5200),
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000086"),
                            CountryCode = "NL",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5210),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5210),
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000087"),
                            CountryCode = "NO",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5210),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5210),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000088"),
                            CountryCode = "NZ",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5210),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5210),
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000089"),
                            CountryCode = "OM",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5220),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5220),
                            Name = "Oman"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000090"),
                            CountryCode = "PA",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5220),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5220),
                            Name = "Panama"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000091"),
                            CountryCode = "PE",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5230),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5230),
                            Name = "Peru"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000092"),
                            CountryCode = "PL",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5230),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5230),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000093"),
                            CountryCode = "PM",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5230),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5230),
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000094"),
                            CountryCode = "PR",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5240),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5240),
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000095"),
                            CountryCode = "PT",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5240),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5240),
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000096"),
                            CountryCode = "PY",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5250),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5250),
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000097"),
                            CountryCode = "QA",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5250),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5250),
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000098"),
                            CountryCode = "RO",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5250),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5250),
                            Name = "Romania"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000099"),
                            CountryCode = "RS",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5260),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5260),
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000100"),
                            CountryCode = "RU",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5260),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5260),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000101"),
                            CountryCode = "SA",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5260),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5260),
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000102"),
                            CountryCode = "SE",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5270),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5270),
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000103"),
                            CountryCode = "SG",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5270),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5270),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000104"),
                            CountryCode = "SI",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5280),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5280),
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000105"),
                            CountryCode = "SK",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5280),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5280),
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000106"),
                            CountryCode = "SN",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5280),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5280),
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000107"),
                            CountryCode = "SR",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5290),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5290),
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000108"),
                            CountryCode = "SV",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5290),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5290),
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000109"),
                            CountryCode = "TR",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5290),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5290),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000110"),
                            CountryCode = "TT",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5300),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5300),
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000111"),
                            CountryCode = "UA",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5300),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5300),
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000112"),
                            CountryCode = "US",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5310),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5310),
                            Name = "United States"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000113"),
                            CountryCode = "UY",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5310),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5310),
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000114"),
                            CountryCode = "VE",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5310),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5310),
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000115"),
                            CountryCode = "VI",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5320),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5320),
                            Name = "Virgin Islands"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000116"),
                            CountryCode = "VN",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5320),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5320),
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000117"),
                            CountryCode = "YE",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5320),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5330),
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000118"),
                            CountryCode = "ZA",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5330),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5330),
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000119"),
                            CountryCode = "ZM",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5330),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5330),
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000120"),
                            CountryCode = "ZW",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5340),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(5340),
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("maERP.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateEnrollment")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.CustomerAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DefaultDeliveryAddress")
                        .HasColumnType("boolean");

                    b.Property<bool>("DefaultInvoiceAddress")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseNr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("customer_address", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.CustomerSalesChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RemoteCustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SalesChannelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("customer_saleschannel", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.GoodsReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("date");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DateCreated");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiptDate");

                    b.HasIndex("WarehouseId");

                    b.ToTable("goods_receipt", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryAddressCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressCompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressStreet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressZip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressCompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressStreet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressZip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InvoiceStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentTransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ShippingCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("invoice", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EAN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("TaxRate")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("invoice_item", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Logo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("manufacturer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            City = "Berlin",
                            Country = "Deutschland",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 140, DateTimeKind.Utc).AddTicks(5620),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 140, DateTimeKind.Utc).AddTicks(5620),
                            Email = "info@beispiel-hersteller.de",
                            Name = "Beispiel Hersteller GmbH",
                            Phone = "+49 30 12345678",
                            State = "Berlin",
                            Street = "Musterstraße 123",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Website = "https://www.beispiel-hersteller.de",
                            ZipCode = "10115"
                        });
                });

            modelBuilder.Entity("maERP.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryAddressCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressCompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressStreet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressZip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InternalNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressCompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressStreet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressZip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("InvoiceSent")
                        .HasColumnType("boolean");

                    b.Property<bool>("OrderConfirmationSent")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentTransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RemoteOrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SalesChannelId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ShippingCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("ShippingInformationSent")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.OrderHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemGenerated")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int?>("OrderStatusNew")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderStatusOld")
                        .HasColumnType("integer");

                    b.Property<int?>("PaymentStatusNew")
                        .HasColumnType("integer");

                    b.Property<int?>("PaymentStatusOld")
                        .HasColumnType("integer");

                    b.Property<string>("ShippingStatusNew")
                        .HasColumnType("text");

                    b.Property<string>("ShippingStatusOld")
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("order_history", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MissingProductEan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MissingProductSku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ShippingId")
                        .HasColumnType("uuid");

                    b.Property<double>("TaxRate")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("order_item", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.OrderItemSerialNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("order_item_serialnumber", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Asin")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Depth")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionOptimized")
                        .HasColumnType("text");

                    b.Property<string>("Ean")
                        .HasColumnType("text");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Msrp")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameOptimized")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TaxClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<bool>("UseOptimized")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Weight")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.HasIndex("TaxClassId");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.ProductSalesChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MinimumProfit")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("MinimumProfitUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RemoteProductId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RepricingType")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SalesChannelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesChannelId");

                    b.ToTable("product_saleschannel", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.ProductStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<double>("Stock")
                        .HasColumnType("double precision");

                    b.Property<double>("StockMax")
                        .HasColumnType("double precision");

                    b.Property<double>("StockMin")
                        .HasColumnType("double precision");

                    b.Property<double>("StorageLocation")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("product_stock", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.SalesChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ExportCustomers")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExportOrders")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExportProducts")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImportCustomers")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImportOrders")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImportProducts")
                        .HasColumnType("boolean");

                    b.Property<bool>("InitialProductExportCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("InitialProductImportCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("saleschannel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 142, DateTimeKind.Utc).AddTicks(290),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 142, DateTimeKind.Utc).AddTicks(290),
                            ExportCustomers = false,
                            ExportOrders = false,
                            ExportProducts = false,
                            ImportCustomers = false,
                            ImportOrders = false,
                            ImportProducts = false,
                            InitialProductExportCompleted = false,
                            InitialProductImportCompleted = false,
                            Name = "Kasse Ladengeschäft",
                            Password = "",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Type = 1,
                            Url = "",
                            Username = ""
                        });
                });

            modelBuilder.Entity("maERP.Domain.Entities.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("setting", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666601"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(8790),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(8790),
                            Key = "Company.Name",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "Musterfirma GmbH"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666602"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9250),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9250),
                            Key = "Company.Address",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "Musterstraße 123"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666603"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9260),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9260),
                            Key = "Company.ZipCity",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "12345 Musterstadt"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666604"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9260),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9260),
                            Key = "Company.Country",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "Deutschland"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666605"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9270),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9270),
                            Key = "Company.Phone",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "+49 123 456789"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666606"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9270),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9270),
                            Key = "Company.Email",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "info@musterfirma.de"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666607"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9270),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9280),
                            Key = "Company.Website",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "www.musterfirma.de"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666608"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9280),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9280),
                            Key = "Company.TaxId",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "123/456/7890"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666609"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9280),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9280),
                            Key = "Company.VatId",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "DE123456789"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666610"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9290),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9290),
                            Key = "Company.BankName",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "Musterbank"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666611"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9290),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9290),
                            Key = "Company.Iban",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "DE89 3704 0044 0532 0130 00"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666612"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9300),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9300),
                            Key = "Company.Bic",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "MUSTDEXXX"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666613"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9300),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9300),
                            Key = "Company.LogoPath",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = ""
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666614"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9310),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9310),
                            Key = "Jwt.Key",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "CHANGE_TO_YOUR_VERY_SECRET_JWT_SIGNING_KEY"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666615"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9310),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9310),
                            Key = "Jwt.Issuer",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "maERP.Server"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666616"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9310),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9310),
                            Key = "Jwt.Audience",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "maERP.Client"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666617"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9320),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9320),
                            Key = "Jwt.DurationInMinutes",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "60"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666618"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9320),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9320),
                            Key = "Jwt.RefreshTokenExpireDays",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "7"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666619"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9330),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9330),
                            Key = "Email.ApiKey",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "Sendgrid-Key"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666620"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9330),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9330),
                            Key = "Email.FromAddress",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "no-reply@martin-andrich.de"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666621"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9340),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9340),
                            Key = "Email.FromName",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "maERP"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666622"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9340),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9340),
                            Key = "Telemetry.Endpoint",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "http://localhost:4317"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666623"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9340),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 147, DateTimeKind.Utc).AddTicks(9340),
                            Key = "Telemetry.ServiceName",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Value = "maERP.Server"
                        });
                });

            modelBuilder.Entity("maERP.Domain.Entities.Shipping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShippingCost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ShippingProviderId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShippingProviderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShippingTaxRate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("shipping", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.ShippingProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("shipping_provider", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.ShippingProviderRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxHeight")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("MaxLength")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("MaxWeight")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("MaxWidth")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ShippingProviderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShippingProviderId");

                    b.ToTable("shipping_provider_rate", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.TaxClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("TaxRate")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("tax_class", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777771"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 142, DateTimeKind.Utc).AddTicks(5020),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 142, DateTimeKind.Utc).AddTicks(5020),
                            TaxRate = 19.0,
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777772"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 142, DateTimeKind.Utc).AddTicks(5170),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 142, DateTimeKind.Utc).AddTicks(5170),
                            TaxRate = 7.0,
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777773"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 142, DateTimeKind.Utc).AddTicks(5170),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 142, DateTimeKind.Utc).AddTicks(5170),
                            TaxRate = 0.0,
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        });
                });

            modelBuilder.Entity("maERP.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TenantCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("TenantCode")
                        .IsUnique();

                    b.ToTable("tenant", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            ContactEmail = "admin@example.com",
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 131, DateTimeKind.Utc).AddTicks(7680),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 131, DateTimeKind.Utc).AddTicks(7680),
                            Description = "Default tenant for initial setup",
                            IsActive = true,
                            Name = "Default Tenant",
                            TenantCode = "DEFAULT"
                        });
                });

            modelBuilder.Entity("maERP.Domain.Entities.UserTenant", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("UserId", "TenantId");

                    b.HasIndex("TenantId");

                    b.ToTable("user_tenant", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("warehouse", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            DateCreated = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(8430),
                            DateModified = new DateTime(2025, 9, 13, 16, 49, 13, 139, DateTimeKind.Utc).AddTicks(8430),
                            Name = "Hauptlager",
                            TenantId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("maERP.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("maERP.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("maERP.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalesChannelWarehouse", b =>
                {
                    b.HasOne("maERP.Domain.Entities.SalesChannel", null)
                        .WithMany()
                        .HasForeignKey("SalesChannelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Entities.Warehouse", null)
                        .WithMany()
                        .HasForeignKey("WarehousesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Domain.Entities.AiPrompt", b =>
                {
                    b.HasOne("maERP.Domain.Entities.AiModel", null)
                        .WithMany("AiPrompts")
                        .HasForeignKey("AiModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Tenant", "DefaultTenant")
                        .WithMany("DefaultForUsers")
                        .HasForeignKey("DefaultTenantId");

                    b.Navigation("DefaultTenant");
                });

            modelBuilder.Entity("maERP.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("maERP.Domain.Entities.CustomerSalesChannel", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Customer", null)
                        .WithMany("CustomerSalesChannels")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Domain.Entities.GoodsReceipt", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("maERP.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("maERP.Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("maERP.Domain.Entities.Order", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("maERP.Domain.Entities.OrderHistory", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Order", null)
                        .WithMany("OrderHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Domain.Entities.OrderItemSerialNumber", b =>
                {
                    b.HasOne("maERP.Domain.Entities.OrderItem", null)
                        .WithMany("SerialNumbers")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Domain.Entities.Product", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("maERP.Domain.Entities.TaxClass", "TaxClass")
                        .WithMany("Products")
                        .HasForeignKey("TaxClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("TaxClass");
                });

            modelBuilder.Entity("maERP.Domain.Entities.ProductSalesChannel", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Product", "Product")
                        .WithMany("ProductSalesChannels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Entities.SalesChannel", "SalesChannel")
                        .WithMany()
                        .HasForeignKey("SalesChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesChannel");
                });

            modelBuilder.Entity("maERP.Domain.Entities.ProductStock", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Product", null)
                        .WithMany("ProductStocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("maERP.Domain.Entities.ShippingProviderRate", b =>
                {
                    b.HasOne("maERP.Domain.Entities.ShippingProvider", null)
                        .WithMany("ShippingRates")
                        .HasForeignKey("ShippingProviderId");
                });

            modelBuilder.Entity("maERP.Domain.Entities.UserTenant", b =>
                {
                    b.HasOne("maERP.Domain.Entities.Tenant", "Tenant")
                        .WithMany("UserTenants")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserTenants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("maERP.Domain.Entities.AiModel", b =>
                {
                    b.Navigation("AiPrompts");
                });

            modelBuilder.Entity("maERP.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("UserTenants");
                });

            modelBuilder.Entity("maERP.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerSalesChannels");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("maERP.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("maERP.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderHistories");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("maERP.Domain.Entities.OrderItem", b =>
                {
                    b.Navigation("SerialNumbers");
                });

            modelBuilder.Entity("maERP.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductSalesChannels");

                    b.Navigation("ProductStocks");
                });

            modelBuilder.Entity("maERP.Domain.Entities.ShippingProvider", b =>
                {
                    b.Navigation("ShippingRates");
                });

            modelBuilder.Entity("maERP.Domain.Entities.TaxClass", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("maERP.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("DefaultForUsers");

                    b.Navigation("UserTenants");
                });
#pragma warning restore 612, 618
        }
    }
}
