// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using maERP.Persistence.DatabaseContext;

#nullable disable

namespace maERP.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240604193237_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("maERP.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fcb1c13-f65e-49f8-8d28-53b89efa4a09",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "System",
                            Lastname = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMkKvTeWRHLVAEFZppkEl0qaTy0qtc7u8tBbEt5klc+fhiqdT2GOv7tOIcYSfsUg2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "382c65c8-6d76-428b-b760-706b02b50fcf",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7f9d4e3-b7ac-46b2-bdfd-41075fabcf52",
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "System",
                            Lastname = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBq85fZPcJ+y5L73zBAu8Tp0YM8XtZdfJGadKc5w7U5+kTjtyR0BjSSqSahD7+Pz7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b75637f7-1d18-4f20-90e1-7535b49fbf4d",
                            TwoFactorEnabled = false,
                            UserName = "user@localhost.com"
                        });
                });

            modelBuilder.Entity("maERP.Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "DE",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6057),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6072),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "AT",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6080),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6082),
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "CH",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6084),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6084),
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 4,
                            CountryCode = "AD",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6085),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6086),
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 5,
                            CountryCode = "AF",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6087),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6089),
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 6,
                            CountryCode = "AG",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6089),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6090),
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 7,
                            CountryCode = "AL",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6090),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6090),
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 8,
                            CountryCode = "AM",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6091),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6091),
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 9,
                            CountryCode = "AO",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6092),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6094),
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 10,
                            CountryCode = "AX",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6094),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6094),
                            Name = "Åland Islands"
                        },
                        new
                        {
                            Id = 11,
                            CountryCode = "AR",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6095),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6097),
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 12,
                            CountryCode = "AT",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6098),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6098),
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = 13,
                            CountryCode = "AU",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6099),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6100),
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 14,
                            CountryCode = "AZ",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6100),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6101),
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 15,
                            CountryCode = "BA",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6101),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6101),
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 16,
                            CountryCode = "BB",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6102),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6103),
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 17,
                            CountryCode = "BE",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6104),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6104),
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 18,
                            CountryCode = "BG",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6105),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6105),
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 19,
                            CountryCode = "BL",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6105),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6107),
                            Name = "Saint Barthélemy"
                        },
                        new
                        {
                            Id = 20,
                            CountryCode = "BO",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6107),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6108),
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = 21,
                            CountryCode = "BR",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6108),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6109),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 22,
                            CountryCode = "BS",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6109),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6110),
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = 23,
                            CountryCode = "BY",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6110),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6110),
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 24,
                            CountryCode = "BZ",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6111),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6111),
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 25,
                            CountryCode = "CA",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6112),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6112),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 26,
                            CountryCode = "CH",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6113),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6113),
                            Name = "Cocos (Keeling) Islands"
                        },
                        new
                        {
                            Id = 27,
                            CountryCode = "CI",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6114),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6116),
                            Name = "Ivory Coast"
                        },
                        new
                        {
                            Id = 28,
                            CountryCode = "CL",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6116),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6117),
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 29,
                            CountryCode = "CN",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6117),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6119),
                            Name = "China"
                        },
                        new
                        {
                            Id = 30,
                            CountryCode = "CO",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6119),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6121),
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 31,
                            CountryCode = "CR",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6122),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6122),
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 32,
                            CountryCode = "CU",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6123),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6125),
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 33,
                            CountryCode = "CY",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6126),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6127),
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 34,
                            CountryCode = "CZ",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6128),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6130),
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 35,
                            CountryCode = "DO",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6130),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6132),
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 36,
                            CountryCode = "DK",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6132),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6135),
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 37,
                            CountryCode = "DZ",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6135),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6138),
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 38,
                            CountryCode = "EC",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6138),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6141),
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 39,
                            CountryCode = "EE",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6141),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6142),
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 40,
                            CountryCode = "EG",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6142),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6144),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 41,
                            CountryCode = "ER",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6145),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6146),
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 42,
                            CountryCode = "ES",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6147),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6148),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 43,
                            CountryCode = "ET",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6149),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6151),
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 44,
                            CountryCode = "FI",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6152),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6154),
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 45,
                            CountryCode = "FR",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6155),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6158),
                            Name = "France"
                        },
                        new
                        {
                            Id = 46,
                            CountryCode = "GB",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6159),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6161),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 47,
                            CountryCode = "GE",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6161),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6161),
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 48,
                            CountryCode = "GF",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6162),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6164),
                            Name = "French Guiana"
                        },
                        new
                        {
                            Id = 49,
                            CountryCode = "GH",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6164),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6166),
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 50,
                            CountryCode = "GL",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6166),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6168),
                            Name = "Greenland"
                        },
                        new
                        {
                            Id = 51,
                            CountryCode = "GP",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6169),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6172),
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            Id = 52,
                            CountryCode = "GR",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6172),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6174),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 53,
                            CountryCode = "GT",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6175),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6176),
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 54,
                            CountryCode = "GY",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6177),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6179),
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 55,
                            CountryCode = "HN",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6179),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6180),
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 56,
                            CountryCode = "HR",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6180),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6182),
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 57,
                            CountryCode = "HT",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6183),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6184),
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 58,
                            CountryCode = "HU",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6185),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6187),
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 59,
                            CountryCode = "ID",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6187),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6190),
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 60,
                            CountryCode = "IE",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6190),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6192),
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 61,
                            CountryCode = "IN",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6192),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6197),
                            Name = "India"
                        },
                        new
                        {
                            Id = 62,
                            CountryCode = "IR",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6197),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6199),
                            Name = "Iran"
                        },
                        new
                        {
                            Id = 63,
                            CountryCode = "IS",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6200),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6200),
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 64,
                            CountryCode = "IT",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6201),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6203),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 65,
                            CountryCode = "JM",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6204),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6206),
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 66,
                            CountryCode = "JP",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6206),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6208),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 67,
                            CountryCode = "KE",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6209),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6211),
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 68,
                            CountryCode = "KG",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6212),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6214),
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 69,
                            CountryCode = "KR",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6215),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6216),
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = 70,
                            CountryCode = "KW",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6217),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6219),
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 71,
                            CountryCode = "KZ",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6220),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6220),
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 72,
                            CountryCode = "LU",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6223),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6224),
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 73,
                            CountryCode = "LT",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6224),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6226),
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 74,
                            CountryCode = "LV",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6227),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6228),
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 75,
                            CountryCode = "MA",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6229),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6231),
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 76,
                            CountryCode = "MC",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6231),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6233),
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 77,
                            CountryCode = "MD",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6234),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6236),
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = 78,
                            CountryCode = "MF",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6236),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6238),
                            Name = "Saint Martin"
                        },
                        new
                        {
                            Id = 79,
                            CountryCode = "MG",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6238),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6239),
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 80,
                            CountryCode = "MQ",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6239),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6242),
                            Name = "Martinique"
                        },
                        new
                        {
                            Id = 81,
                            CountryCode = "MT",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6242),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6244),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 82,
                            CountryCode = "MX",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6244),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6247),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 83,
                            CountryCode = "MY",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6247),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6249),
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 84,
                            CountryCode = "NG",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6250),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6252),
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 85,
                            CountryCode = "NI",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6252),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6254),
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 86,
                            CountryCode = "NL",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6255),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6257),
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 87,
                            CountryCode = "NO",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6258),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6258),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 88,
                            CountryCode = "NZ",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6258),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6260),
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 89,
                            CountryCode = "OM",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6386),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6386),
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 90,
                            CountryCode = "PA",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6387),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6387),
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 91,
                            CountryCode = "PE",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6388),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6388),
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 92,
                            CountryCode = "PL",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6388),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6389),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 93,
                            CountryCode = "PM",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6389),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6390),
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Id = 94,
                            CountryCode = "PR",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6390),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6391),
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 95,
                            CountryCode = "PT",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6391),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6391),
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 96,
                            CountryCode = "PY",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6392),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6392),
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 97,
                            CountryCode = "QA",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6393),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6393),
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 98,
                            CountryCode = "RO",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6394),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6394),
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 99,
                            CountryCode = "RS",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6395),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6395),
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 100,
                            CountryCode = "RU",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6396),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6396),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 101,
                            CountryCode = "SA",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6396),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6397),
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 102,
                            CountryCode = "SE",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6397),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6398),
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 103,
                            CountryCode = "SG",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6398),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6398),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 104,
                            CountryCode = "SI",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6399),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6399),
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 105,
                            CountryCode = "SK",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6400),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6400),
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 106,
                            CountryCode = "SN",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6401),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6401),
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 107,
                            CountryCode = "SR",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6402),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6402),
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 108,
                            CountryCode = "SV",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6403),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6403),
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 109,
                            CountryCode = "TR",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6403),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6404),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 110,
                            CountryCode = "TT",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6404),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6405),
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 111,
                            CountryCode = "UA",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6405),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6405),
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 112,
                            CountryCode = "US",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6406),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6406),
                            Name = "United States"
                        },
                        new
                        {
                            Id = 113,
                            CountryCode = "UY",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6407),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6407),
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 114,
                            CountryCode = "VE",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6408),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6408),
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = 115,
                            CountryCode = "VI",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6409),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6409),
                            Name = "Virgin Islands"
                        },
                        new
                        {
                            Id = 116,
                            CountryCode = "VN",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6410),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6410),
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = 117,
                            CountryCode = "YE",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6410),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6411),
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 118,
                            CountryCode = "ZA",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6411),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6412),
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 119,
                            CountryCode = "ZM",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6412),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6412),
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 120,
                            CountryCode = "ZW",
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6413),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(6413),
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("maERP.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateEnrollment")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("maERP.Domain.Models.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DefaultDeliveryAddress")
                        .HasColumnType("boolean");

                    b.Property<bool>("DefaultInvoiceAddress")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseNr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("maERP.Domain.Models.CustomerSalesChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RemoteCustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SalesChannelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerSalesChannel");
                });

            modelBuilder.Entity("maERP.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliverAddressZip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressCompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddressStreet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InternalNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressCompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressStreet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddressZip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentTransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RemoteOrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SalesChannelId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("maERP.Domain.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MissingProductEan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MissingProductSku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<int>("ShippingId")
                        .HasColumnType("integer");

                    b.Property<double>("TaxRate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("maERP.Domain.Models.OrderItemSerialNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemSerialNumber");
                });

            modelBuilder.Entity("maERP.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Asin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Depth")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ean")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Msrp")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaxClassId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.HasIndex("TaxClassId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("maERP.Domain.Models.ProductSalesChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("RemoteProductId")
                        .HasColumnType("integer");

                    b.Property<int>("SalesChannelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesChannelId");

                    b.ToTable("ProductSalesChannel");
                });

            modelBuilder.Entity("maERP.Domain.Models.ProductStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<double>("Stock")
                        .HasColumnType("double precision");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductStock");
                });

            modelBuilder.Entity("maERP.Domain.Models.SalesChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ExportCustomers")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExportOrders")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExportProducts")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImportCustomers")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImportOrders")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImportProducts")
                        .HasColumnType("boolean");

                    b.Property<bool>("InitialProductExportCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("InitialProductImportCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("SalesChannel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(8353),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(8353),
                            ExportCustomers = false,
                            ExportOrders = false,
                            ExportProducts = false,
                            ImportCustomers = false,
                            ImportOrders = false,
                            ImportProducts = false,
                            InitialProductExportCompleted = false,
                            InitialProductImportCompleted = false,
                            Name = "Kasse Ladengeschäft",
                            Password = "",
                            Type = 1,
                            URL = "",
                            Username = "",
                            WarehouseId = 1
                        });
                });

            modelBuilder.Entity("maERP.Domain.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Section")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("maERP.Domain.Models.Shipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("ShippingCost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShippingProviderId")
                        .HasColumnType("integer");

                    b.Property<string>("ShippingProviderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShippingTaxRate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Shipping");
                });

            modelBuilder.Entity("maERP.Domain.Models.ShippingProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShippingProvider");
                });

            modelBuilder.Entity("maERP.Domain.Models.ShippingProviderRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxHeight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaxLength")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaxWeight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaxWidth")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ShippingProviderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShippingProviderId");

                    b.ToTable("ShippingProviderRate");
                });

            modelBuilder.Entity("maERP.Domain.Models.TaxClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("TaxRate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("TaxClass");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(8667),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(8668),
                            TaxRate = 19.0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(8706),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(8706),
                            TaxRate = 7.0
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(8707),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(8707),
                            TaxRate = 0.0
                        });
                });

            modelBuilder.Entity("maERP.Domain.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Warehouse");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(8040),
                            DateModified = new DateTime(2024, 6, 4, 15, 32, 36, 976, DateTimeKind.Utc).AddTicks(8041),
                            Name = "Testlager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("maERP.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("maERP.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("maERP.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Domain.Models.CustomerAddress", b =>
                {
                    b.HasOne("maERP.Domain.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Models.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("maERP.Domain.Models.CustomerSalesChannel", b =>
                {
                    b.HasOne("maERP.Domain.Models.Customer", null)
                        .WithMany("CustomerSalesChannels")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Domain.Models.Order", b =>
                {
                    b.HasOne("maERP.Domain.Models.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Domain.Models.OrderItem", b =>
                {
                    b.HasOne("maERP.Domain.Models.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Domain.Models.OrderItemSerialNumber", b =>
                {
                    b.HasOne("maERP.Domain.Models.OrderItem", null)
                        .WithMany("SerialNumbers")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Domain.Models.Product", b =>
                {
                    b.HasOne("maERP.Domain.Models.TaxClass", "TaxClass")
                        .WithMany("Products")
                        .HasForeignKey("TaxClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxClass");
                });

            modelBuilder.Entity("maERP.Domain.Models.ProductSalesChannel", b =>
                {
                    b.HasOne("maERP.Domain.Models.Product", "Product")
                        .WithMany("ProductSalesChannels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Models.SalesChannel", "SalesChannel")
                        .WithMany()
                        .HasForeignKey("SalesChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesChannel");
                });

            modelBuilder.Entity("maERP.Domain.Models.ProductStock", b =>
                {
                    b.HasOne("maERP.Domain.Models.Product", null)
                        .WithMany("ProductStocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("maERP.Domain.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("maERP.Domain.Models.SalesChannel", b =>
                {
                    b.HasOne("maERP.Domain.Models.Warehouse", null)
                        .WithMany("SalesChannels")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("maERP.Domain.Models.ShippingProviderRate", b =>
                {
                    b.HasOne("maERP.Domain.Models.ShippingProvider", null)
                        .WithMany("ShippingRates")
                        .HasForeignKey("ShippingProviderId");
                });

            modelBuilder.Entity("maERP.Domain.Models.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerSalesChannels");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("maERP.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("maERP.Domain.Models.OrderItem", b =>
                {
                    b.Navigation("SerialNumbers");
                });

            modelBuilder.Entity("maERP.Domain.Models.Product", b =>
                {
                    b.Navigation("ProductSalesChannels");

                    b.Navigation("ProductStocks");
                });

            modelBuilder.Entity("maERP.Domain.Models.ShippingProvider", b =>
                {
                    b.Navigation("ShippingRates");
                });

            modelBuilder.Entity("maERP.Domain.Models.TaxClass", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("maERP.Domain.Models.Warehouse", b =>
                {
                    b.Navigation("SalesChannels");
                });
#pragma warning restore 612, 618
        }
    }
}
