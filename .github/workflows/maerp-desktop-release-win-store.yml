name: Release maERP to Windows Store

on:
  push:
    branches: [ main ]
    paths:
      - 'src/maERP.UI.Desktop/**'
      - 'src/maERP.UI/**'
  workflow_dispatch:

jobs:
  windows-store-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Generate version
      id: version
      shell: pwsh
      run: |
        # Generate version in format: YYYY.MM.DD.BUILD (e.g., 2024.01.15.123)
        $year = Get-Date -Format "yyyy"
        $month = Get-Date -Format "MM"
        $day = Get-Date -Format "dd"
        $build = if ($env:GITHUB_RUN_NUMBER) { $env:GITHUB_RUN_NUMBER } else { "1" }
        $version = "$year.$month.$day.$build"
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Generated version: $version"

    - name: Restore dependencies
      run: dotnet restore src/maERP.UI.Desktop/maERP.UI.Desktop.csproj

    - name: Decode certificate
      shell: pwsh
      run: |
        $certBytes = [System.Convert]::FromBase64String("${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}")
        [System.IO.File]::WriteAllBytes("${{ github.workspace }}\certificate.pfx", $certBytes)

    - name: Build for Windows Store (MSIX)
      shell: pwsh
      run: |
        dotnet publish src/maERP.UI.Desktop/maERP.UI.Desktop.csproj --configuration Release --runtime win-x64 --self-contained false --output ./publish/msix -p:PublishSingleFile=false -p:PublishReadyToRun=false -p:Version="${{ steps.version.outputs.VERSION }}" -p:AssemblyVersion="${{ steps.version.outputs.VERSION }}" -p:FileVersion="${{ steps.version.outputs.VERSION }}" -p:UseAppHost=true

    - name: Create MSIX Package
      shell: pwsh
      run: |
        # Windows runners should have Windows SDK pre-installed, but let's find the tools
        $possiblePaths = @(
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\makeappx.exe",
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\makeappx.exe",
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.20348.0\x64\makeappx.exe",
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\makeappx.exe"
        )
        
        $fullMakeappxPath = $null
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            $fullMakeappxPath = $path
            Write-Host "Found makeappx.exe at: $fullMakeappxPath"
            break
          }
        }
        
        if (-not $fullMakeappxPath) {
          # Fallback: search for x64 makeappx.exe in Windows Kits (avoid ARM64)
          $found = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Name "makeappx.exe" -ErrorAction SilentlyContinue | Where-Object { $_.DirectoryName -like "*x64*" } | Select-Object -First 1
          if ($found) {
            $fullMakeappxPath = $found.FullName
            Write-Host "Found makeappx.exe at: $fullMakeappxPath"
          } else {
            Write-Error "makeappx.exe not found. Windows SDK may not be installed."
            exit 1
          }
        }
        
        # Create Assets directory and placeholder assets
        New-Item -Path "./publish/msix/Assets" -ItemType Directory -Force
        
        # Create minimal placeholder PNG files (1x1 transparent pixel in base64)
        $transparentPixelBase64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChAI9BfKSVQAAAABJRU5ErkJggg=="
        $transparentPixelBytes = [System.Convert]::FromBase64String($transparentPixelBase64)
        
        [System.IO.File]::WriteAllBytes("./publish/msix/Assets/StoreLogo.png", $transparentPixelBytes)
        [System.IO.File]::WriteAllBytes("./publish/msix/Assets/Square150x150Logo.png", $transparentPixelBytes)
        [System.IO.File]::WriteAllBytes("./publish/msix/Assets/Square44x44Logo.png", $transparentPixelBytes)
        [System.IO.File]::WriteAllBytes("./publish/msix/Assets/Wide310x150Logo.png", $transparentPixelBytes)
        
        # Create package manifest as AppxManifest.xml (required by MakeAppx)
        $manifestContent = @"
        <?xml version="1.0" encoding="utf-8"?>
        <Package xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10"
                 xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10"
                 xmlns:rescap="http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities">
          <Identity Name="MartinAndrich.maERP"
                    Publisher="CN=Martin Andrich"
                    Version="${{ steps.version.outputs.VERSION }}" />
          <Properties>
            <DisplayName>maERP</DisplayName>
            <PublisherDisplayName>Martin Andrich</PublisherDisplayName>
            <Logo>Assets\StoreLogo.png</Logo>
            <Description>Cross-platform ERP system</Description>
          </Properties>
          <Dependencies>
            <TargetDeviceFamily Name="Windows.Universal" MinVersion="10.0.17763.0" MaxVersionTested="10.0.22000.0" />
          </Dependencies>
          <Applications>
            <Application Id="maERP" Executable="maERP.UI.Desktop.exe" EntryPoint="Windows.FullTrustApplication">
              <uap:VisualElements DisplayName="maERP"
                                  Description="Cross-platform ERP system"
                                  BackgroundColor="transparent"
                                  Square150x150Logo="Assets\Square150x150Logo.png"
                                  Square44x44Logo="Assets\Square44x44Logo.png">
                <uap:DefaultTile Wide310x150Logo="Assets\Wide310x150Logo.png" />
              </uap:VisualElements>
            </Application>
          </Applications>
          <Capabilities>
            <rescap:Capability Name="runFullTrust" />
          </Capabilities>
        </Package>
        "@
        
        $manifestContent | Out-File -FilePath "./publish/msix/AppxManifest.xml" -Encoding UTF8
        
        # Create MSIX package
        & $fullMakeappxPath pack /d "./publish/msix" /p "./maERP-${{ steps.version.outputs.VERSION }}.msix"

    - name: Sign MSIX Package
      shell: pwsh
      run: |
        # Find signtool.exe location
        $possiblePaths = @(
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe",
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe",
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.20348.0\x64\signtool.exe",
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe"
        )
        
        $fullSigntoolPath = $null
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            $fullSigntoolPath = $path
            Write-Host "Found signtool.exe at: $fullSigntoolPath"
            break
          }
        }
        
        if (-not $fullSigntoolPath) {
          # Fallback: search for x64 signtool.exe in Windows Kits (avoid ARM64)
          $found = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Name "signtool.exe" -ErrorAction SilentlyContinue | Where-Object { $_.DirectoryName -like "*x64*" } | Select-Object -First 1
          if ($found) {
            $fullSigntoolPath = $found.FullName
            Write-Host "Found signtool.exe at: $fullSigntoolPath"
          } else {
            Write-Error "signtool.exe not found. Windows SDK may not be installed."
            exit 1
          }
        }
        
        # Sign the package
        & $fullSigntoolPath sign /f "${{ github.workspace }}\certificate.pfx" /p "${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}" /fd SHA256 "./maERP-${{ steps.version.outputs.VERSION }}.msix"

    - name: Store Upload (Manual Process)
      shell: pwsh
      run: |
        Write-Host "=== MSIX Package Ready for Manual Store Submission ==="
        Write-Host "Package Location: ${{ github.workspace }}/maERP-${{ steps.version.outputs.VERSION }}.msix"
        Write-Host ""
        Write-Host "Manual Steps Required:"
        Write-Host "1. Download the MSIX package from GitHub Release"
        Write-Host "2. Sign in to Microsoft Partner Center"
        Write-Host "3. Navigate to your maERP app submission"
        Write-Host "4. Upload the MSIX package"
        Write-Host "5. Complete certification and publishing process"
        Write-Host ""
        Write-Host "Note: Automated Store API integration requires additional setup"
        Write-Host "and Microsoft Partner Center API credentials configuration."

    - name: Create GitHub Release with MSIX
      uses: softprops/action-gh-release@v2
      with:
        tag_name: store-v${{ steps.version.outputs.VERSION }}
        name: maERP Windows Store v${{ steps.version.outputs.VERSION }}
        body: |
          ## maERP Windows Store Release v${{ steps.version.outputs.VERSION }}
          
          Automatisch erstelltes Windows Store Release der maERP Desktop-Anwendung.
          
          ### MSIX Package
          - **Windows Store Package**: `maERP-${{ steps.version.outputs.VERSION }}.msix`
          
          ### Installation
          Das Package wurde automatisch an den Microsoft Store Ã¼bermittelt.
          
          ---
          
          ðŸ¤– Automatisch erstellt durch GitHub Actions
        draft: false
        prerelease: false
        files: |
          maERP-${{ steps.version.outputs.VERSION }}.msix
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup
      shell: pwsh
      run: |
        Remove-Item "${{ github.workspace }}\certificate.pfx" -Force -ErrorAction SilentlyContinue